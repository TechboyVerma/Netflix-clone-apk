Index: app/src/main/java/com/verma/netflix/netflix.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/netflix.kt b/app/src/main/java/com/verma/netflix/netflix.kt
new file mode 100644
--- /dev/null	(date 1699365208807)
+++ b/app/src/main/java/com/verma/netflix/netflix.kt	(date 1699365208807)
@@ -0,0 +1,152 @@
+package com.verma.netflix
+
+import android.content.Intent
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+import android.view.MenuItem
+import android.view.View
+import android.widget.EditText
+import android.widget.ImageView
+import android.widget.LinearLayout
+import android.widget.PopupMenu
+import android.widget.ProgressBar
+import com.google.android.material.bottomnavigation.BottomNavigationView
+import com.google.firebase.auth.FirebaseAuth
+import com.verma.netflix.frangments.TV
+import com.verma.netflix.frangments.anime
+import com.verma.netflix.frangments.download
+import com.verma.netflix.frangments.home
+import com.verma.netflix.frangments.sports
+
+
+class netflix : AppCompatActivity() {
+    // Inside your activity or fragment class
+    private lateinit var auth: FirebaseAuth
+
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_netflix)
+        // Add images to the imageList using SlideModel
+        auth = FirebaseAuth.getInstance()
+
+
+
+        val getLinearLayout = findViewById<LinearLayout>(R.id.search_layout)
+        val progressBar = findViewById<ProgressBar>(R.id.progressBar)
+        val editText = findViewById<EditText>(R.id.search_edittext)
+        val imageView=findViewById<ImageView>(R.id.search_icon)
+
+        editText.setOnClickListener(){
+
+            val intent = Intent(this,searching::class.java)
+            startActivity(intent)
+        }
+        getLinearLayout.setOnClickListener(){
+            val intent = Intent(this,searching::class.java)
+            startActivity(intent)
+        }
+        imageView.setOnClickListener(){
+            val intent = Intent(this,searching::class.java)
+            startActivity(intent)
+        }
+
+
+        val bottomNavigationView: BottomNavigationView = findViewById(R.id.bottom_navigation_view)
+        val homeMenuItem = bottomNavigationView.menu.findItem(R.id.menu_item1)
+        homeMenuItem.isEnabled = true
+        homeMenuItem.isChecked = true
+
+        bottomNavigationView.setOnItemSelectedListener { menuItem ->
+            val fragmentTransaction = supportFragmentManager.beginTransaction()
+            when (menuItem.itemId) {
+                R.id.menu_item1 -> {
+                    // Handle Home item click
+                    // Replace HomeFragment with the appropriate fragment class for the Home screen
+                    val homeFragment = home()
+                    fragmentTransaction.replace(R.id.container, homeFragment)
+                    fragmentTransaction.addToBackStack(null)
+                    fragmentTransaction.commit()
+                    true
+                }
+                R.id.menu_item2 -> {
+                    // Handle TV item click
+                    val tvFragment = TV()
+                    fragmentTransaction.replace(R.id.container, tvFragment)
+                    fragmentTransaction.addToBackStack(null)
+                    fragmentTransaction.commit()
+                    true
+                }
+                R.id.menu_item3 -> {
+                    // Handle Anime item click
+                    val animeFragment = anime()
+                    fragmentTransaction.replace(R.id.container, animeFragment)
+                    fragmentTransaction.addToBackStack(null)
+                    fragmentTransaction.commit()
+                    true
+                }
+                R.id.menu_item4 -> {
+                    // Handle Sports item click
+                    val sportsFragment = sports()
+                    fragmentTransaction.replace(R.id.container, sportsFragment)
+                    fragmentTransaction.addToBackStack(null)
+                    fragmentTransaction.commit()
+                    true
+                }
+                R.id.menu_item5 -> {
+                    // Handle Download item click
+                    val downloadFragment = download()
+                    fragmentTransaction.replace(R.id.container, downloadFragment)
+                    fragmentTransaction.addToBackStack(null)
+                    fragmentTransaction.commit()
+                    true
+                }
+                else -> false
+            }
+        }
+        val profile=findViewById<ImageView>(R.id.profile)
+        val popupMenu = PopupMenu(this, profile)
+        popupMenu.menuInflater.inflate(R.menu.profile, popupMenu.menu)
+
+        // Set item click listener for the PopupMenu
+        popupMenu.setOnMenuItemClickListener(object : PopupMenu.OnMenuItemClickListener {
+            override fun onMenuItemClick(item: MenuItem): Boolean {
+                // Handle menu item clicks here
+                when (item.itemId) {
+                    R.id.menu_item1 -> {
+                        // Handle menu item 1 click
+                        return true
+                    }
+                    R.id.menu_item2 -> {
+                        // Handle menu item 2 click
+                        signOut() // Call your sign out method here
+                        true
+                        return true
+                    }
+                    // Add more menu items as needed
+                    else -> return false
+                }
+            }
+        })
+
+        // Set click listener for the Menu button
+        profile.setOnClickListener(object : View.OnClickListener {
+            override fun onClick(v: View) {
+                // Show the PopupMenu when the Menu button is clicked
+                popupMenu.show()
+            }
+        })
+
+    }
+
+    private fun signOut() {
+        FirebaseAuth.getInstance().signOut()
+        // Redirect the user to the sign-in screen or perform other necessary actions
+        // For example, you can start a new activity:
+        val intent = Intent(this, MainActivity::class.java)
+        startActivity(intent)
+        // finish() // Optionally, finish the current activity to prevent going back to it
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/verma/netflix/sign_in.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/sign_in.kt b/app/src/main/java/com/verma/netflix/sign_in.kt
new file mode 100644
--- /dev/null	(date 1699365208807)
+++ b/app/src/main/java/com/verma/netflix/sign_in.kt	(date 1699365208807)
@@ -0,0 +1,198 @@
+package com.verma.netflix
+
+import android.content.Intent
+import android.content.res.ColorStateList
+import android.net.Uri
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+import android.os.Handler
+import android.view.View
+
+import android.widget.ImageView
+import android.widget.LinearLayout
+import android.widget.ProgressBar
+import android.widget.TextView
+import android.widget.Toast
+
+import androidx.core.content.ContextCompat
+
+import com.google.android.material.textfield.TextInputEditText
+import com.google.android.material.textfield.TextInputLayout
+
+import com.google.firebase.Firebase
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.auth.auth
+
+
+
+import kotlin.math.sign
+
+class sign_in : AppCompatActivity() {
+
+    // Initialize Firebase Auth
+    private lateinit var auth: FirebaseAuth
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+
+
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_sign_in)
+        val learnTextView: TextView = findViewById(R.id.learn)
+        val expandedTextView: TextView = findViewById(R.id.expandedText)
+        val signBackTextView: TextView = findViewById(R.id.signback)
+        val help = findViewById<TextView>(R.id.help)
+        val back = findViewById<ImageView>(R.id.back)
+
+
+        auth = Firebase.auth
+        val emailText = findViewById<TextInputEditText>(R.id.email)
+        val emailContainer: TextInputLayout = findViewById(R.id.emailContainer)
+        val passwordText = findViewById<TextInputEditText>(R.id.pass)
+        val passContainer: TextInputLayout = findViewById(R.id.passContainer)
+        var login: LinearLayout = findViewById(R.id.siginbutton)
+
+        login.setOnClickListener {
+            var email = emailText.text.toString()
+            var password = passwordText.text.toString()
+            // Set the error text color for emailContainer
+            emailContainer.setErrorTextColor(ColorStateList.valueOf(ContextCompat.getColor(this, R.color.halo_or)))
+            // Set the error text color for passContainer
+            passContainer.setErrorTextColor(ColorStateList.valueOf(ContextCompat.getColor(this, R.color.halo_or)))
+
+
+            emailContainer.error = null
+            passContainer.error = null
+
+            var isValid = true
+
+            // Validate email
+            if (email.isEmpty() || !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
+                emailContainer.error = "Enter a valid email address"
+                isValid = false
+            }
+
+            // Validate password
+            if (password.isEmpty()) {
+                passContainer.error = "Enter a password"
+                isValid = false
+            } else if (password.length < 6) {
+                passContainer.error = "Password must be at least 6 characters"
+                isValid = false
+            } else if (password.length > 10) {
+                passContainer.error = "Password must be at most 10 characters"
+                isValid = false
+            }
+
+            // If validation fails, return
+            if (!isValid) {
+                return@setOnClickListener
+            }
+
+            if (!email.isEmpty() && !password.isEmpty()) {
+                auth.signInWithEmailAndPassword(email, password)
+                    .addOnCompleteListener(this) { task ->
+                        if (task.isSuccessful) {
+
+                            val progressBar = findViewById<ProgressBar>(R.id.progressBar)
+                            val textView = findViewById<TextView>(R.id.textView)
+                            textView.visibility = View.GONE
+                            progressBar.visibility = View.VISIBLE
+
+                            // Simulate some loading process with a delay (for example, 2 seconds)
+                            Handler().postDelayed({
+                                // After the loading process is done, show the TextView and hide the ProgressBar
+                                progressBar.visibility = View.GONE
+                                textView.visibility = View.VISIBLE
+                                startActivity(Intent(this, netflix::class.java))
+                            }, 1000)
+                        } else {
+                            val progressBar = findViewById<ProgressBar>(R.id.progressBar)
+                            val textView = findViewById<TextView>(R.id.textView)
+                            textView.visibility = View.GONE
+                            progressBar.visibility = View.VISIBLE
+
+                            // Simulate some loading process with a delay (for example, 2 seconds)
+                            Handler().postDelayed({
+                                // After the loading process is done, show the TextView and hide the ProgressBar
+                                progressBar.visibility = View.GONE
+                                textView.visibility = View.VISIBLE
+
+                            }, 1000)
+                            if (password.isEmpty()) {
+                                passContainer.error = "Enter a password"
+                                isValid = true
+                            }
+
+                            // If validation fails, return
+
+                            Toast.makeText(
+                                baseContext, "Authentication failed.",
+                                Toast.LENGTH_SHORT
+                            ).show()
+                        }
+                    }
+            } else {
+                // Validate email
+                if (email.isEmpty() || !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
+                    emailContainer.error = "Enter a valid email address"
+                    isValid = false
+                }
+
+                // Validate password
+                if (password.isEmpty()) {
+                    passContainer.error = "Enter a password"
+                    isValid = false
+                } else if (password.length < 6) {
+                    passContainer.error = "Password must be at least 6 characters"
+                    isValid = false
+                } else if (password.length > 10) {
+                    passContainer.error = "Password must be at most 10 characters"
+                    isValid = false
+                }
+
+                // If validation fails, return
+                if (!isValid) {
+                    return@setOnClickListener
+                }
+
+            }
+        }
+
+
+        // Set click listener for the "Learn more" TextView
+        learnTextView.setOnClickListener {
+            // Toggle visibility of the expanded TextView
+            if (expandedTextView.visibility == View.VISIBLE) {
+                expandedTextView.visibility = View.GONE
+            } else {
+                expandedTextView.visibility = View.VISIBLE
+            }
+        }
+        signBackTextView.setOnClickListener {
+            // Start MainActivity when signback TextView is clicked
+            val intent = Intent(this@sign_in, MainActivity::class.java)
+            startActivity(intent)
+        }
+        back.setOnClickListener {
+            // Start MainActivity when signback TextView is clicked
+            val intent = Intent(this@sign_in, MainActivity::class.java)
+            startActivity(intent)
+        }
+        // Open the URL in a web browser when the button is clicked
+        help.setOnClickListener(object : View.OnClickListener {
+            override fun onClick(v: View?) {
+                // Open the URL in a web browser when the button is clicked
+                val privacyUrl = "https://helpful-madeleine-464c66.netlify.app/"
+                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(privacyUrl))
+                startActivity(intent)
+            }
+        })
+        //for current user
+        fun onStart() {
+            super.onStart()
+            val currentUser = auth.currentUser
+            if (currentUser != null) {
+                startActivity(Intent(this, MainActivity::class.java))
+            }
+        }
+    }}
\ No newline at end of file
Index: app/src/main/java/com/verma/netflix/sign_up.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/sign_up.kt b/app/src/main/java/com/verma/netflix/sign_up.kt
new file mode 100644
--- /dev/null	(date 1699365208807)
+++ b/app/src/main/java/com/verma/netflix/sign_up.kt	(date 1699365208807)
@@ -0,0 +1,78 @@
+package com.verma.netflix
+
+import android.content.Intent
+import android.content.res.ColorStateList
+import android.os.Bundle
+import android.os.Handler
+import android.view.View
+import androidx.appcompat.app.AppCompatActivity
+import com.google.android.material.textfield.TextInputEditText
+import com.google.android.material.textfield.TextInputLayout
+import android.widget.ImageView
+import android.widget.LinearLayout
+import android.widget.ProgressBar
+import android.widget.TextView
+import androidx.core.content.ContextCompat
+
+
+class sign_up : AppCompatActivity() {
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_sign_up)
+
+        val cancel = findViewById<ImageView>(R.id.cancel_im1)
+        val emailText = findViewById<TextInputEditText>(R.id.email1)
+        val emailContainer: TextInputLayout = findViewById(R.id.emailContainer)
+        val sign: LinearLayout = findViewById(R.id.button111)
+
+        val colorValid = ContextCompat.getColor(this, R.color.boxStrokeColorValid) // Define color for valid input
+        val colorInvalid = ContextCompat.getColor(this, R.color.boxStrokeColorInvalid) // Define color for invalid input
+
+        sign.setOnClickListener {
+
+            var email = emailText.text.toString().trim()
+
+            // Reset error state and color
+            emailContainer.error = null
+            emailContainer.isErrorEnabled = false
+            emailContainer.setBoxStrokeColorStateList(ColorStateList.valueOf(colorValid)) // Set default color
+
+            // Validate email
+            if (email.isEmpty() || !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
+                emailContainer.error = "Enter a valid email address"
+                emailContainer.isErrorEnabled = true // Enable error state for emailContainer
+                emailContainer.setBoxStrokeColorStateList(ColorStateList.valueOf(colorInvalid)) // Set invalid color
+            }
+
+            // If validation fails, return
+            if (emailContainer.isErrorEnabled) {
+                return@setOnClickListener
+            }
+            val progressBar = findViewById<ProgressBar>(R.id.progressBar)
+            val textView = findViewById<TextView>(R.id.textView)
+            textView.visibility = View.GONE
+            progressBar.visibility = View.VISIBLE
+
+            // Simulate some loading process with a delay (for example, 2 seconds)
+            Handler().postDelayed({
+                // After the loading process is done, show the TextView and hide the ProgressBar
+                progressBar.visibility = View.GONE
+                textView.visibility = View.VISIBLE
+                val intent = Intent(this, signin2::class.java)
+                intent.putExtra("EMAIL", email)  // Add email value to the Intent as a String
+                startActivity(intent)
+            }, 1000)
+
+
+
+
+
+
+        }
+
+        cancel.setOnClickListener { // Start SignInActivity when the TextView is clicked
+            val intent = Intent(this@sign_up, MainActivity::class.java)
+            startActivity(intent)
+        }
+    }
+}
Index: app/src/main/java/com/verma/netflix/signin2.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/signin2.kt b/app/src/main/java/com/verma/netflix/signin2.kt
new file mode 100644
--- /dev/null	(date 1699365516492)
+++ b/app/src/main/java/com/verma/netflix/signin2.kt	(date 1699365516492)
@@ -0,0 +1,96 @@
+package com.verma.netflix
+
+import android.content.Intent
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+import android.widget.LinearLayout
+import android.widget.TextView
+import android.widget.Toast
+import com.google.android.material.textfield.TextInputEditText
+import com.google.android.material.textfield.TextInputLayout
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.database.FirebaseDatabase
+
+class signin2 : AppCompatActivity() {
+    private lateinit var auth: FirebaseAuth
+    private lateinit var database: FirebaseDatabase
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_signin2)
+        auth = FirebaseAuth.getInstance()
+        database = FirebaseDatabase.getInstance()
+
+        val email1 = findViewById<TextInputEditText>(R.id.email1)
+        val pass1 = findViewById<TextInputEditText>(R.id.pass1)
+        val emailContainer: TextInputLayout = findViewById(R.id.emailContainer)
+        val passContainer: TextInputLayout = findViewById(R.id.passContainer)
+
+        val signinButton = findViewById<LinearLayout>(R.id.siginbutton)
+        val phonenumber = findViewById<TextView>(R.id.ph)
+
+
+
+        signinButton.setOnClickListener {
+            val email = email1.text.toString().trim()
+            val password = pass1.text.toString().trim()
+
+            // Reset error messages
+            emailContainer.error = null
+            passContainer.error = null
+
+            var isValid = true
+
+            // Validate email and password
+            if (email.isEmpty() || !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
+                emailContainer.error = "Enter a valid email address"
+                isValid = false
+            }
+            if (password.isEmpty() || password.length < 6 || password.length > 10) {
+                passContainer.error = "Password must be between 6 and 10 characters"
+                isValid = false
+            }
+
+            // If validation fails, return
+            if (!isValid) {
+                return@setOnClickListener
+            }
+
+            // Firebase SignUp Authentication
+            auth.createUserWithEmailAndPassword(email, password)
+                .addOnCompleteListener(this) { task ->
+                    if (task.isSuccessful) {
+                        val user = auth.currentUser
+                        user?.let {
+                            // Create a reference to the user node in the database
+                            val usersRef = database.reference.child("users").child(it.uid)
+
+                            // Create a HashMap to store user data
+                            val userData = HashMap<String, Any>()
+                            userData["email"] = email
+
+                            // Set the user data in the database
+                            usersRef.setValue(userData)
+
+                            // Sign up success, send verification email
+                            user.sendEmailVerification().addOnCompleteListener { emailTask ->
+                                if (emailTask.isSuccessful) {
+                                    // Email sent, update UI or show a verification screen
+                                    // For example, navigate to EmailVerificationActivity
+                                    startActivity(Intent(this, EmailVerificationActivity::class.java))
+                                    finish() // Finish the current activity to prevent going back
+                                } else {
+                                    showToast("Failed to send verification email. Please try again.")
+                                }
+                            }
+                        }
+                    } else {
+                        showToast("Sign up failed. Please try again.")
+                    }
+                }
+        }
+    }
+
+    private fun showToast(message: String) {
+        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
+    }
+}
Index: app/src/main/java/com/verma/netflix/searching.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/searching.kt b/app/src/main/java/com/verma/netflix/searching.kt
new file mode 100644
--- /dev/null	(date 1699365208807)
+++ b/app/src/main/java/com/verma/netflix/searching.kt	(date 1699365208807)
@@ -0,0 +1,11 @@
+package com.verma.netflix
+
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+
+class searching : AppCompatActivity() {
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_searching)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/verma/netflix/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/MainActivity.kt b/app/src/main/java/com/verma/netflix/MainActivity.kt
new file mode 100644
--- /dev/null	(date 1699365208807)
+++ b/app/src/main/java/com/verma/netflix/MainActivity.kt	(date 1699365208807)
@@ -0,0 +1,131 @@
+package com.verma.netflix
+
+import android.content.Intent
+import android.net.Uri
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+import android.os.Handler
+import android.view.MenuItem
+import android.view.View
+import android.widget.Button
+import android.widget.ImageView
+import android.widget.LinearLayout
+import android.widget.PopupMenu
+import android.widget.ProgressBar
+import android.widget.TextView
+import androidx.appcompat.widget.AppCompatButton
+import com.denzcoskun.imageslider.ImageSlider
+import com.denzcoskun.imageslider.constants.ActionTypes
+import com.denzcoskun.imageslider.constants.ScaleTypes
+import com.denzcoskun.imageslider.interfaces.ItemChangeListener
+import com.denzcoskun.imageslider.interfaces.ItemClickListener
+import com.denzcoskun.imageslider.interfaces.TouchListener
+import com.denzcoskun.imageslider.models.SlideModel
+
+
+class MainActivity : AppCompatActivity() {
+    val imageList = ArrayList<SlideModel>() // Create image list
+
+
+
+
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_main)
+
+
+        // Add images to the imageList using SlideModel
+        imageList.add(SlideModel(R.drawable.st, ScaleTypes.FIT))
+        imageList.add(SlideModel(R.drawable.chil, ScaleTypes.FIT))
+        imageList.add(SlideModel(R.drawable.me, ScaleTypes.FIT))
+        imageList.add(SlideModel(R.drawable.end, ScaleTypes.FIT))
+
+
+        val imageSlider = findViewById<ImageSlider>(R.id.image_slider)
+        imageSlider.setImageList(imageList)
+        // Initialize the PopupMenu
+        val menu_button = findViewById<ImageView>(R.id.menu_button)
+
+        val popupMenu = PopupMenu(this, menu_button)
+        popupMenu.menuInflater.inflate(R.menu.menu_main, popupMenu.menu)
+
+        // Set item click listener for the PopupMenu
+        popupMenu.setOnMenuItemClickListener(object : PopupMenu.OnMenuItemClickListener {
+            override fun onMenuItemClick(item: MenuItem): Boolean {
+                // Handle menu item clicks here
+                when (item.itemId) {
+                    R.id.menu_item1 -> {
+                        // Handle menu item 1 click
+                        return true
+                    }
+
+                    R.id.menu_item2 -> {
+                        // Handle menu item 2 click
+                        return true
+                    }
+                    // Add more menu items as needed
+                    else -> return false
+                }
+            }
+        })
+
+        // Set click listener for the Menu button
+        menu_button.setOnClickListener(object : View.OnClickListener {
+            override fun onClick(v: View) {
+                // Show the PopupMenu when the Menu button is clicked
+                popupMenu.show()
+            }
+        })
+        val privacy = findViewById<TextView>(R.id.text1)
+        // Open the URL in a web browser when the button is clicked
+        privacy.setOnClickListener(object : View.OnClickListener {
+            override fun onClick(v: View?) {
+                // Open the URL in a web browser when the button is clicked
+                val privacyUrl = "https://helpful-madeleine-464c66.netlify.app/"
+                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(privacyUrl))
+                startActivity(intent)
+            }
+        })
+        val signin = findViewById<TextView>(R.id.text2)
+        // Set OnClickListener for the signText TextView
+        signin.setOnClickListener(object : View.OnClickListener {
+            override fun onClick(v: View?) {
+                // Start SignInActivity when the TextView is clicked
+                val intent = Intent(this@MainActivity, sign_in::class.java)
+                startActivity(intent)
+            }
+        })
+
+        signin.setOnClickListener(object : View.OnClickListener {
+            override fun onClick(v: View?) {
+                // Start SignInActivity when the TextView is clicked
+                val intent = Intent(this@MainActivity, sign_in::class.java)
+                startActivity(intent)
+            }
+        })
+        val get = findViewById<LinearLayout>(R.id.get)
+        get.setOnClickListener {
+            // Start SignUpActivity when the button is clicked
+            var intent = Intent(this@MainActivity, sign_up::class.java)
+            startActivity(intent)
+        }
+        val getLinearLayout = findViewById<LinearLayout>(R.id.get)
+        val progressBar = findViewById<ProgressBar>(R.id.progressBar)
+        val textView = findViewById<TextView>(R.id.textView)
+
+        getLinearLayout.setOnClickListener {
+            // Hide the TextView and show the ProgressBar
+            textView.visibility = View.GONE
+            progressBar.visibility = View.VISIBLE
+
+            // Simulate some loading process with a delay (for example, 2 seconds)
+            Handler().postDelayed({
+                // After the loading process is done, show the TextView and hide the ProgressBar
+                progressBar.visibility = View.GONE
+                textView.visibility = View.VISIBLE
+                var intent = Intent(this@MainActivity, sign_up::class.java)
+                startActivity(intent)
+            }, 1000) // 1000 milliseconds = 1 seconds
+        }
+    }}
\ No newline at end of file
Index: app/src/main/java/com/verma/netflix/Splash_screen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/Splash_screen.kt b/app/src/main/java/com/verma/netflix/Splash_screen.kt
new file mode 100644
--- /dev/null	(date 1699365208807)
+++ b/app/src/main/java/com/verma/netflix/Splash_screen.kt	(date 1699365208807)
@@ -0,0 +1,55 @@
+package com.verma.netflix
+
+import android.animation.Animator
+import android.annotation.SuppressLint
+import android.content.Intent
+import android.media.MediaPlayer
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+import android.os.Handler
+import android.view.View
+import android.widget.ProgressBar
+import com.airbnb.lottie.LottieAnimationView
+
+class Splash_screen : AppCompatActivity() {
+    private lateinit var animationView: LottieAnimationView
+    private lateinit var mediaPlayer: MediaPlayer
+
+    @SuppressLint("MissingInflatedId")
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_splash_screen)
+        animationView = findViewById(R.id.lottie_layer_name)  // Replace with your LottieAnimationView ID
+        mediaPlayer = MediaPlayer.create(this, R.raw.ffect)  // Replace with your sound file name without extension
+
+
+        animationView.addAnimatorListener(object : Animator.AnimatorListener {
+            override fun onAnimationStart(animation: Animator) {
+                // Start playing the sound when the animation starts
+                mediaPlayer.start()
+            }
+
+            override fun onAnimationEnd(animation: Animator) {
+                // Handle animation end if needed
+                val intent = Intent(this@Splash_screen, MainActivity::class.java)
+                startActivity(intent)
+
+            }
+
+            override fun onAnimationCancel(animation: Animator) {
+                // Handle animation cancel if needed
+
+            }
+
+            override fun onAnimationRepeat(animation: Animator) {
+                // Handle animation repeat if needed
+            }
+        })
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+        mediaPlayer.release()  // Release MediaPlayer resources when the activity is destroyed
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/verma/netflix/EmailVerificationActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/EmailVerificationActivity.kt b/app/src/main/java/com/verma/netflix/EmailVerificationActivity.kt
new file mode 100644
--- /dev/null	(date 1699365208807)
+++ b/app/src/main/java/com/verma/netflix/EmailVerificationActivity.kt	(date 1699365208807)
@@ -0,0 +1,54 @@
+package com.verma.netflix
+
+import android.content.Intent
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+import android.widget.TextView
+import android.widget.Toast
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.database.core.view.View
+
+
+class EmailVerificationActivity : AppCompatActivity() {
+    private lateinit var auth: FirebaseAuth
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_email_verification)
+
+
+        val paragraphText = "Congrutulations! We Just sent an email to \n "
+        val paragraphTextView = findViewById<TextView>(R.id.paragraphTextView)
+        paragraphTextView.text = paragraphText
+
+        auth = FirebaseAuth.getInstance()
+
+
+        // Check if the user is already signed in and email is verified
+        val user = auth.currentUser
+        if (user != null && user.isEmailVerified) {
+            // User is signed in and email is verified, navigate to Netflix activity
+            startActivity(Intent(this, netflix::class.java))
+            finish() // Finish this activity to prevent going back
+        } else {
+            // User is not signed in or email is not verified, handle accordingly
+            // You can show a message to the user and provide options to resend verification email, etc.
+            user?.sendEmailVerification()?.addOnCompleteListener { emailTask ->
+                if (emailTask.isSuccessful) {
+                    // Email sent successfully, navigate to EmailVerificationActivity
+                    startActivity(Intent(this, netflix::class.java))
+                    finish() // Finish this activity to prevent going back
+                } else {
+                    // Email not sent, show an error message
+                    showToast("Failed to send verification email. Please try again.")
+                }
+            }}
+
+    }
+
+    private fun showToast(message: String) {
+        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
+    }
+
+
+}
Index: app/src/main/java/com/verma/netflix/Activites/home.kt
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/Activites/home.kt b/app/src/main/java/com/verma/netflix/Activites/home.kt
deleted file mode 100644
--- a/app/src/main/java/com/verma/netflix/Activites/home.kt	
+++ /dev/null	
@@ -1,92 +0,0 @@
-package com.verma.netflix.Activites
-
-
-import androidx.appcompat.app.AppCompatActivity
-import android.os.Bundle
-import android.os.Handler
-import android.os.Looper
-import android.widget.ProgressBar
-import androidx.recyclerview.widget.LinearLayoutManager
-import androidx.recyclerview.widget.RecyclerView
-import androidx.viewpager2.widget.CompositePageTransformer
-import androidx.viewpager2.widget.MarginPageTransformer
-import androidx.viewpager2.widget.ViewPager2
-
-import com.verma.netflix.Adapters.SliderAdapter
-import com.verma.netflix.Domain.SliderItems
-import com.verma.netflix.R
-
-class home : AppCompatActivity() {
-
-    private lateinit var viewPager2: ViewPager2
-    private lateinit var progressBar: ProgressBar
-    private lateinit var slideRunnable: Runnable
-
-
-    private val slideHandler = Handler(Looper.getMainLooper())
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_home)
-
-
-
-
-        viewPager2 = findViewById(R.id.viewPager2)
-        progressBar = findViewById(R.id.progressBar)
-
-
-        initView()
-        banners()
-    }
-
-    private fun banners() {
-        val sliderItems = ArrayList<SliderItems>()
-        sliderItems.add(SliderItems(R.drawable.wide))
-        sliderItems.add(SliderItems(R.drawable.wide1))
-        sliderItems.add(SliderItems(R.drawable.wide2))
-        sliderItems.add(SliderItems(R.drawable.wide3))
-        sliderItems.add(SliderItems(R.drawable.wide4))
-
-        val sliderAdapter = SliderAdapter(sliderItems, viewPager2)
-        viewPager2.adapter = sliderAdapter
-        viewPager2.clipToPadding = false
-        viewPager2.clipChildren=false
-        viewPager2.offscreenPageLimit = 4
-        viewPager2.overScrollMode = RecyclerView.OVER_SCROLL_NEVER
-
-        val compositePageTransformer = CompositePageTransformer()
-        compositePageTransformer.addTransformer(MarginPageTransformer(40))
-        compositePageTransformer.addTransformer(ViewPager2.PageTransformer { page, position ->
-            val r = 1 - Math.abs(position)
-            page.scaleY = 0.85f + r * 0.15f
-        })
-        viewPager2.setPageTransformer(compositePageTransformer)
-        viewPager2.setCurrentItem(1)
-        viewPager2.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {
-            override fun onPageSelected(position: Int) {
-                super.onPageSelected(position)
-                slideHandler.removeCallbacks(slideRunnable)
-            }
-        })
-
-        slideRunnable = Runnable {
-            viewPager2.currentItem = viewPager2.currentItem + 1
-        }
-
-    }
-
-    override fun onResume() {
-        super.onResume()
-        slideHandler.removeCallbacks { slideRunnable }
-    }
-
-    override fun onPause() {
-        super.onPause()
-        slideHandler.postDelayed(slideRunnable,2000)
-    }
-
-    private fun initView() {
-        // Initialize your views or perform any other setup here
-    }
-}
Index: app/src/main/java/com/verma/netflix/Activites/sign_in.kt
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/Activites/sign_in.kt b/app/src/main/java/com/verma/netflix/Activites/sign_in.kt
deleted file mode 100644
--- a/app/src/main/java/com/verma/netflix/Activites/sign_in.kt	
+++ /dev/null	
@@ -1,199 +0,0 @@
-package com.verma.netflix.Activites
-
-import android.content.Intent
-import android.content.res.ColorStateList
-import android.net.Uri
-import androidx.appcompat.app.AppCompatActivity
-import android.os.Bundle
-import android.os.Handler
-import android.view.View
-
-import android.widget.ImageView
-import android.widget.LinearLayout
-import android.widget.ProgressBar
-import android.widget.TextView
-import android.widget.Toast
-
-import androidx.core.content.ContextCompat
-
-import com.google.android.material.textfield.TextInputEditText
-import com.google.android.material.textfield.TextInputLayout
-
-import com.google.firebase.Firebase
-import com.google.firebase.auth.FirebaseAuth
-import com.google.firebase.auth.auth
-import com.verma.netflix.R
-
-class sign_in : AppCompatActivity() {
-
-    // Initialize Firebase Auth
-    private lateinit var auth: FirebaseAuth
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-
-
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_sign_in)
-        val learnTextView: TextView = findViewById(R.id.learn)
-        val expandedTextView: TextView = findViewById(R.id.expandedText)
-        val signBackTextView: TextView = findViewById(R.id.signback)
-        val help = findViewById<TextView>(R.id.help)
-        val back = findViewById<ImageView>(R.id.back)
-
-
-        auth = Firebase.auth
-        val emailText = findViewById<TextInputEditText>(R.id.email)
-        val emailContainer: TextInputLayout = findViewById(R.id.emailContainer)
-        val passwordText = findViewById<TextInputEditText>(R.id.pass)
-        val passContainer: TextInputLayout = findViewById(R.id.passContainer)
-        var login: LinearLayout = findViewById(R.id.siginbutton)
-
-        login.setOnClickListener {
-            var email = emailText.text.toString()
-            var password = passwordText.text.toString()
-            // Set the error text color for emailContainer
-            emailContainer.setErrorTextColor(ColorStateList.valueOf(ContextCompat.getColor(this,
-                R.color.halo_or
-            )))
-            // Set the error text color for passContainer
-            passContainer.setErrorTextColor(ColorStateList.valueOf(ContextCompat.getColor(this,
-                R.color.halo_or
-            )))
-
-
-            emailContainer.error = null
-            passContainer.error = null
-
-            var isValid = true
-
-            // Validate email
-            if (email.isEmpty() || !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
-                emailContainer.error = "Enter a valid email address"
-                isValid = false
-            }
-
-            // Validate password
-            if (password.isEmpty()) {
-                passContainer.error = "Enter a password"
-                isValid = false
-            } else if (password.length < 6) {
-                passContainer.error = "Password must be at least 6 characters"
-                isValid = false
-            } else if (password.length > 10) {
-                passContainer.error = "Password must be at most 10 characters"
-                isValid = false
-            }
-
-            // If validation fails, return
-            if (!isValid) {
-                return@setOnClickListener
-            }
-
-            if (!email.isEmpty() && !password.isEmpty()) {
-                auth.signInWithEmailAndPassword(email, password)
-                    .addOnCompleteListener(this) { task ->
-                        if (task.isSuccessful) {
-
-                            val progressBar = findViewById<ProgressBar>(R.id.progressBar)
-                            val textView = findViewById<TextView>(R.id.textView)
-                            textView.visibility = View.GONE
-                            progressBar.visibility = View.VISIBLE
-
-                            // Simulate some loading process with a delay (for example, 2 seconds)
-                            Handler().postDelayed({
-                                // After the loading process is done, show the TextView and hide the ProgressBar
-                                progressBar.visibility = View.GONE
-                                textView.visibility = View.VISIBLE
-                                startActivity(Intent(this, HomeActivity::class.java))
-                            }, 1000)
-                        } else {
-                            val progressBar = findViewById<ProgressBar>(R.id.progressBar)
-                            val textView = findViewById<TextView>(R.id.textView)
-                            textView.visibility = View.GONE
-                            progressBar.visibility = View.VISIBLE
-
-                            // Simulate some loading process with a delay (for example, 2 seconds)
-                            Handler().postDelayed({
-                                // After the loading process is done, show the TextView and hide the ProgressBar
-                                progressBar.visibility = View.GONE
-                                textView.visibility = View.VISIBLE
-
-                            }, 1000)
-                            if (password.isEmpty()) {
-                                passContainer.error = "Enter a password"
-                                isValid = true
-                            }
-
-                            // If validation fails, return
-
-                            Toast.makeText(
-                                baseContext, "Authentication failed.",
-                                Toast.LENGTH_SHORT
-                            ).show()
-                        }
-                    }
-            } else {
-                // Validate email
-                if (email.isEmpty() || !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
-                    emailContainer.error = "Enter a valid email address"
-                    isValid = false
-                }
-
-                // Validate password
-                if (password.isEmpty()) {
-                    passContainer.error = "Enter a password"
-                    isValid = false
-                } else if (password.length < 6) {
-                    passContainer.error = "Password must be at least 6 characters"
-                    isValid = false
-                } else if (password.length > 10) {
-                    passContainer.error = "Password must be at most 10 characters"
-                    isValid = false
-                }
-
-                // If validation fails, return
-                if (!isValid) {
-                    return@setOnClickListener
-                }
-
-            }
-        }
-
-
-        // Set click listener for the "Learn more" TextView
-        learnTextView.setOnClickListener {
-            // Toggle visibility of the expanded TextView
-            if (expandedTextView.visibility == View.VISIBLE) {
-                expandedTextView.visibility = View.GONE
-            } else {
-                expandedTextView.visibility = View.VISIBLE
-            }
-        }
-        signBackTextView.setOnClickListener {
-            // Start MainActivity when signback TextView is clicked
-            val intent = Intent(this@sign_in, MainActivity::class.java)
-            startActivity(intent)
-        }
-        back.setOnClickListener {
-            // Start MainActivity when signback TextView is clicked
-            val intent = Intent(this@sign_in, MainActivity::class.java)
-            startActivity(intent)
-        }
-        // Open the URL in a web browser when the button is clicked
-        help.setOnClickListener(object : View.OnClickListener {
-            override fun onClick(v: View?) {
-                // Open the URL in a web browser when the button is clicked
-                val privacyUrl = "https://helpful-madeleine-464c66.netlify.app/"
-                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(privacyUrl))
-                startActivity(intent)
-            }
-        })
-        //for current user
-        fun onStart() {
-            super.onStart()
-            val currentUser = auth.currentUser
-            if (currentUser != null) {
-                startActivity(Intent(this, MainActivity::class.java))
-            }
-        }
-    }}
\ No newline at end of file
Index: app/src/main/java/com/verma/netflix/Activites/sign_up.kt
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/Activites/sign_up.kt b/app/src/main/java/com/verma/netflix/Activites/sign_up.kt
deleted file mode 100644
--- a/app/src/main/java/com/verma/netflix/Activites/sign_up.kt	
+++ /dev/null	
@@ -1,79 +0,0 @@
-package com.verma.netflix.Activites
-
-import android.content.Intent
-import android.content.res.ColorStateList
-import android.os.Bundle
-import android.os.Handler
-import android.view.View
-import androidx.appcompat.app.AppCompatActivity
-import com.google.android.material.textfield.TextInputEditText
-import com.google.android.material.textfield.TextInputLayout
-import android.widget.ImageView
-import android.widget.LinearLayout
-import android.widget.ProgressBar
-import android.widget.TextView
-import androidx.core.content.ContextCompat
-import com.verma.netflix.R
-
-
-class sign_up : AppCompatActivity() {
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_sign_up)
-
-        val cancel = findViewById<ImageView>(R.id.cancel_im1)
-        val emailText = findViewById<TextInputEditText>(R.id.email1)
-        val emailContainer: TextInputLayout = findViewById(R.id.emailContainer)
-        val sign: LinearLayout = findViewById(R.id.button111)
-
-        val colorValid = ContextCompat.getColor(this, R.color.boxStrokeColorValid) // Define color for valid input
-        val colorInvalid = ContextCompat.getColor(this, R.color.boxStrokeColorInvalid) // Define color for invalid input
-
-        sign.setOnClickListener {
-
-            var email = emailText.text.toString().trim()
-
-            // Reset error state and color
-            emailContainer.error = null
-            emailContainer.isErrorEnabled = false
-            emailContainer.setBoxStrokeColorStateList(ColorStateList.valueOf(colorValid)) // Set default color
-
-            // Validate email
-            if (email.isEmpty() || !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
-                emailContainer.error = "Enter a valid email address"
-                emailContainer.isErrorEnabled = true // Enable error state for emailContainer
-                emailContainer.setBoxStrokeColorStateList(ColorStateList.valueOf(colorInvalid)) // Set invalid color
-            }
-
-            // If validation fails, return
-            if (emailContainer.isErrorEnabled) {
-                return@setOnClickListener
-            }
-            val progressBar = findViewById<ProgressBar>(R.id.progressBar)
-            val textView = findViewById<TextView>(R.id.textView)
-            textView.visibility = View.GONE
-            progressBar.visibility = View.VISIBLE
-
-            // Simulate some loading process with a delay (for example, 2 seconds)
-            Handler().postDelayed({
-                // After the loading process is done, show the TextView and hide the ProgressBar
-                progressBar.visibility = View.GONE
-                textView.visibility = View.VISIBLE
-                val intent = Intent(this, signin2::class.java)
-                intent.putExtra("EMAIL", email)  // Add email value to the Intent as a String
-                startActivity(intent)
-            }, 1000)
-
-
-
-
-
-
-        }
-
-        cancel.setOnClickListener { // Start SignInActivity when the TextView is clicked
-            val intent = Intent(this@sign_up, MainActivity::class.java)
-            startActivity(intent)
-        }
-    }
-}
Index: app/src/main/java/com/verma/netflix/Activites/Splash_screen.kt
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/Activites/Splash_screen.kt b/app/src/main/java/com/verma/netflix/Activites/Splash_screen.kt
deleted file mode 100644
--- a/app/src/main/java/com/verma/netflix/Activites/Splash_screen.kt	
+++ /dev/null	
@@ -1,53 +0,0 @@
-package com.verma.netflix.Activites
-
-import android.animation.Animator
-import android.annotation.SuppressLint
-import android.content.Intent
-import android.media.MediaPlayer
-import androidx.appcompat.app.AppCompatActivity
-import android.os.Bundle
-import com.airbnb.lottie.LottieAnimationView
-import com.verma.netflix.R
-
-class Splash_screen : AppCompatActivity() {
-    private lateinit var animationView: LottieAnimationView
-    private lateinit var mediaPlayer: MediaPlayer
-
-    @SuppressLint("MissingInflatedId")
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_splash_screen)
-        animationView = findViewById(R.id.lottie_layer_name)  // Replace with your LottieAnimationView ID
-        mediaPlayer = MediaPlayer.create(this, R.raw.ffect)  // Replace with your sound file name without extension
-
-
-        animationView.addAnimatorListener(object : Animator.AnimatorListener {
-            override fun onAnimationStart(animation: Animator) {
-                // Start playing the sound when the animation starts
-                mediaPlayer.start()
-            }
-
-            override fun onAnimationEnd(animation: Animator) {
-                // Handle animation end if needed
-                val intent = Intent(this@Splash_screen, MainActivity::class.java)
-                startActivity(intent)
-
-            }
-
-            override fun onAnimationCancel(animation: Animator) {
-                // Handle animation cancel if needed
-
-            }
-
-            override fun onAnimationRepeat(animation: Animator) {
-                // Handle animation repeat if needed
-            }
-        })
-    }
-
-    override fun onDestroy() {
-        super.onDestroy()
-        mediaPlayer.release()  // Release MediaPlayer resources when the activity is destroyed
-    }
-
-}
\ No newline at end of file
Index: app/src/main/java/com/verma/netflix/Activites/EmailVerificationActivity.kt
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/Activites/EmailVerificationActivity.kt b/app/src/main/java/com/verma/netflix/Activites/EmailVerificationActivity.kt
deleted file mode 100644
--- a/app/src/main/java/com/verma/netflix/Activites/EmailVerificationActivity.kt	
+++ /dev/null	
@@ -1,54 +0,0 @@
-package com.verma.netflix.Activites
-
-import android.content.Intent
-import androidx.appcompat.app.AppCompatActivity
-import android.os.Bundle
-import android.widget.TextView
-import android.widget.Toast
-import com.google.firebase.auth.FirebaseAuth
-import com.verma.netflix.R
-
-
-class EmailVerificationActivity : AppCompatActivity() {
-    private lateinit var auth: FirebaseAuth
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_email_verification)
-
-
-        val paragraphText = "Congrutulations! We Just sent an email to \n "
-        val paragraphTextView = findViewById<TextView>(R.id.paragraphTextView)
-        paragraphTextView.text = paragraphText
-
-        auth = FirebaseAuth.getInstance()
-
-
-        // Check if the user is already signed in and email is verified
-        val user = auth.currentUser
-        if (user != null && user.isEmailVerified) {
-            // User is signed in and email is verified, navigate to Netflix activity
-            startActivity(Intent(this, HomeActivity::class.java))
-            finish() // Finish this activity to prevent going back
-        } else {
-            // User is not signed in or email is not verified, handle accordingly
-            // You can show a message to the user and provide options to resend verification email, etc.
-            user?.sendEmailVerification()?.addOnCompleteListener { emailTask ->
-                if (emailTask.isSuccessful) {
-                    // Email sent successfully, navigate to EmailVerificationActivity
-                    startActivity(Intent(this, HomeActivity::class.java))
-                    finish() // Finish this activity to prevent going back
-                } else {
-                    // Email not sent, show an error message
-                    showToast("Failed to send verification email. Please try again.")
-                }
-            }}
-
-    }
-
-    private fun showToast(message: String) {
-        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
-    }
-
-
-}
Index: app/src/main/java/com/verma/netflix/Domain/SliderItems.kt
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/Domain/SliderItems.kt b/app/src/main/java/com/verma/netflix/Domain/SliderItems.kt
deleted file mode 100644
--- a/app/src/main/java/com/verma/netflix/Domain/SliderItems.kt	
+++ /dev/null	
@@ -1,14 +0,0 @@
-package com.verma.netflix.Domain
-
-class SliderItems(private var image: Int) {
-
-    // Getter method for the image property
-    fun getImage(): Int {
-        return image
-    }
-
-    // Setter method for the image property
-    fun setImage(newImage: Int) {
-        image = newImage
-    }
-}
Index: app/src/main/java/com/verma/netflix/Adapters/SliderAdapter.kt
===================================================================
diff --git a/app/src/main/java/com/verma/netflix/Adapters/SliderAdapter.kt b/app/src/main/java/com/verma/netflix/Adapters/SliderAdapter.kt
deleted file mode 100644
--- a/app/src/main/java/com/verma/netflix/Adapters/SliderAdapter.kt	
+++ /dev/null	
@@ -1,52 +0,0 @@
-package com.verma.netflix.Adapters
-
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.ImageView
-import androidx.recyclerview.widget.RecyclerView
-import androidx.viewpager2.widget.ViewPager2
-import com.airbnb.lottie.model.content.RoundedCorners
-import com.bumptech.glide.Glide
-import com.bumptech.glide.load.resource.bitmap.CenterCrop
-import com.bumptech.glide.load.resource.bitmap.RoundedCorners
-import com.bumptech.glide.request.RequestOptions
-import com.verma.netflix.Domain.SliderItems
-import com.verma.netflix.R
-
-class SliderAdapter(private val sliderItems: MutableList<SliderItems>, private val viewPager2: ViewPager2) :
-    RecyclerView.Adapter<SliderAdapter.SliderViewHolder>() {
-
-    inner class SliderViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
-        private val imageView: ImageView = itemView.findViewById(R.id.imageslider)
-
-        fun setImage(sliderItem: SliderItems) {
-            val requestOptions = RequestOptions().transform(CenterCrop(), RoundedCorners(60))
-            Glide.with(itemView.context)
-                .load(sliderItem.getImage()) // Assuming SliderItems has a property called imageUrl
-                .apply(requestOptions)
-                .into(imageView)
-        }
-    }
-
-    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): SliderViewHolder {
-        val context = parent.context
-        val view = LayoutInflater.from(context).inflate(R.layout.silde_item_container, parent, false)
-        return SliderViewHolder(view)
-    }
-
-    override fun onBindViewHolder(holder: SliderViewHolder, position: Int) {
-        val actualPosition = position % sliderItems.size
-        holder.setImage(sliderItems[actualPosition])
-    }
-
-    override fun getItemCount(): Int {
-
-        return Int.MAX_VALUE
-    }
-
-    fun addItems(newItems: List<SliderItems>) {
-        sliderItems.addAll(newItems)
-        notifyDataSetChanged()
-    }
-}
diff --git a/app/src/main/java/com/verma/netflix/Activites/signin2.kt b/app/src/main/java/com/verma/netflix/Activites/signin2.kt
deleted file mode 100644
diff --git a/app/src/main/java/com/verma/netflix/Activites/MainActivity.kt b/app/src/main/java/com/verma/netflix/Activites/MainActivity.kt
deleted file mode 100644
